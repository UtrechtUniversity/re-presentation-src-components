--- 
format: 
  revealjs:
    theme: themes/uu.scss
    logo: images/UU_logo_2021_EN_RGB.png
    footer: ""
---

# ResearchCloud Component Design

::: {.r-stack}
Mini-Workshop
:::

::: {.footer}
Jelle Treep & Dawa Ometto
:::

# Welcome!

## Who are we?

ITS Research Engineering. Core activities include:

- Projects
- Trainings
- Consultancy (e.g. HPC)
- VRE service

##

<br>

![](images/rdm.png)

::: {style="text-align: center; margin-top: 180px; font-size: 3em; color: red;"}

uu.nl/rdm

:::

## Welcome!

Do you have experience with:

* ResearchCloud?
* Ansible / configuration management?
* Docker / Podman?

## Program

- 09.00: Walk-in
- 09.30: Welcome & intro to SRC
- 10.00: Some usecases for SRC components
- 10.15: Introduction to designing components & best practices
- 11.15: Design your own component!
- 12.15: Wrap up
- 12.30-13.00: Lunch

## These Slides

You can find these slides here:

[https://edu.nl/gy6np](https://utrechtuniversity.github.io/re-presentation-src-components/slides#/)

## ResearchCloud Lightning Intro

Some advantages of SURF ResearchCloud:

- Easy access to compute and storage
- Researchers can start VMs themselves
- Easy collaboration (SRAM)
- Cloud neutral: deploy VMs on SURF infrastructure or elsewhere

## ResearchCloud Lightning Intro

SURF HPC cloud infrastructure:

- up to 60 CPU cores
- up to 750 GB RAM
- up to 4 GPU drives (NVIDIA A10)
- up to 1.5 TB storage



## ResearchCloud Lightning Intro

![](images/SRAM-collaboration.png)

## ResearchCloud Lightning Intro

![](images/SRAM-members.png)

## ResearchCloud Lightning Intro

![](images/SRAM-groups.png)

## ResearchCloud Lightning Intro

:::{.theme-section-small}
* Workspaces (aka VMs, servers)
  - Running instances of a Catalog item
* Catalog Items
  - A set of components
  - Parameters
  - VM size
* Components!
  - (Installation) scripts
    - Ansible
    - Docker
    - Powershell
:::

## ResearchCloud Lightning Intro

:::{.theme-section}
[ResearchCloud Portal](https://surfresearchcloud.nl/)

<br>

Documentation for ResearchCloud:

  * Our [VRE Docs](https://utrechtuniversity.github.io/vre-docs/)
  * SURF's [wiki](https://servicedesk.surf.nl/wiki/display/WIKI/SURF+Research+Cloud)

:::

## Some use cases for components

- Adam El Kassimi (Elyra)
- Dawa Ometto ([Galaxy](https://github.com/UtrechtUniversity/src-component-galaxy/))

# Creating components

## Portal

Note about the special SURF components:

- SRC-OS
- SRC-CO
- SRC-External (for different types)
- SRC Nginx

## SRC-External

Custom components are executed *on the workspace* from within SRC-External.

This can lead to complications due to:

* Specific Ansible version on the workspace
* Specific Ansible collections on the workspace
* OS-dependencies on the workspace
* ...

## Ansible

A Playbook is the main script file that will be applied on a machine managed by Ansible:

```yaml
---
- name: Example component
  hosts: localhost # On ResearchCloud, the target host is always simply 'localhost'.
  tasks:

    - name: Output some text # Every task has a name
      ansible.builtin.debug: # Every task invokes some module
        msg: hello world # modules have arguments

# If you save this file to `test.yml`, you can run it with: ansible-playbook -i localhost, -c local -vv test.yml
```

## Ansible

1. Fork the [template repo](https://github.com/UtrechtUniversity/src-component-template)
1. Clone your fork locally
1. `cd` to the repo directory

## Ansible

Try running the test playbook on a container!

```
podman pull ghcr.io/utrechtuniversity/src-test-workspace:ubuntu_jammy

podman run -d --name src_component_test -v $(pwd):/etc/rsc/my_component ghcr.io/utrechtuniversity/src-test-workspace:ubuntu_jammy /sbin/init

podman exec src_component_test run_component.sh /etc/rsc/my_component/playbook.yml
```

## Ansible

If you're using Docker instead of Podman:

```
docker pull ghcr.io/utrechtuniversity/src-test-workspace:ubuntu_jammy

docker run --privileged -d --name src_component_test -v $(pwd):/etc/rsc/my_component ghcr.io/utrechtuniversity/src-test-workspace:ubuntu_jammy /sbin/init

docker exec src_component_test run_component.sh /etc/rsc/my_component/playbook.yml
```

## Ansible

* Modules
* Variables
    * ResearchCloud parameters will be available as variables in your playbook!
* Conditionals
* Loops

## Ansible

```yaml
- name: Example component
  hosts: localhost
  vars:
    foo: true
  tasks:

    - name: Output some text
      ansible.builtin.debug:
        msg: "{{ item }} is a number"
      with_items:
        - 1
        - 2
        - 3
      when: foo
```

## Ansible
### Roles and collections

An Ansible **role** is a reusable set of tasks that can be (re-)applied with distinct arguments.

An Ansible **collection** is a set of roles (as well as plugins and playbooks).

Both can be installed with `ansible-galaxy`.

## Ansible
### Roles

```yaml
---
# Top of your playbook
- name: Example component
  roles:
    - role: my_local_role # from the 'roles' directory of your repo
    - role: uusrc.general.uv # from a collection
      vars:
        uv_venvs:
          - path: /tmp/test_venv
            python: 3.13
        uv_python_versions:
          - 3.11
  tasks:
    # You can also include a role from within your tasks
    - name: Include a role
      ansible.builtin.include_role: foobar
```

## Ansible
### Roles and collections

The dependencies declared in `requirements.yml` in the root of your repository will be automatically installed.

```yaml
---
collections:
  - name: https://github.com/UtrechtUniversity/researchcloud-items.git
    type: git
    version: main
roles:
  - src: geerlingguy.docker
    version: 6.1.0
```

This is simply a [standard requirements file](https://docs.ansible.com/ansible/latest/galaxy/user_guide.html#installing-roles-and-collections-from-the-same-requirements-yml-file) for `ansible-galaxy`.

## Ansible
### Our collections

* [uusrc.general](https://github.com/UtrechtUniversity/researchcloud-items) (main repo, [docs](https://utrechtuniversity.github.io/researchcloud-items/))
* [uusrc.ibridges](https://github.com/UtrechtUniversity/ibridges-ansible) (iRODS data transfer)

## Ansible

**Don't**: use `command` and `shell` where you can use a dedicated module instead.

* More portable
* No need for error/output handling 
* `ansible.builtin.shell` especially can show unexpected behaviour

Examples: `ansible.builtin.pip`, `ansible.builtin.service`

## Ansible

**Don't**: depend uncritically on external roles.
<br/><br/>
Fix dependencies to specific tags or commits for stability and security. 

## Ansible

**Do**: process/sanitize incoming ResearchCloud parameters.
<br/><br/>
All parameters passed along by the ResearchCloud portal arrive in your playbook as *strings*:

* Newlines are escaped
* Possibly empty...

## Ansible

Parsing incoming ResearchCloud parameters:

```yaml
---
# Top of your playbook
- name: Example component parameters
  vars:
    _src_component_some_str: "{{ src_component_some_str | default('fallback value', true) | replace('\\n','\n') }}"
    _src_component_some_boolean: "{{ src_component_some_boolean | default(false, true) | bool }}"
    _src_component_some_dict: "{{ _src_component_some_dict | default({}, true) | from_yaml }}"
    # good luck with multiline yaml/json!
  tasks:
    ...
```

## Ansible

**Do**: keep your playbooks simple.
<br/><br/>
Separate concerns into roles and task files:

- roles for anything that has potential to be reused
- separate tasks into files to prevent clutter

## Ansible

Including task files:

```yaml
ansible.builtin.include_tasks: tasks/dependencies/debian.yml
when: ansible_os_family == 'Debian'

ansible.builtin.include_tasks: tasks/dependencies/rh.yml
when: ansible_os_family == 'RedHat'
```

## CI

The template repo contains boilerplate for:

* `molecule` tests, configured especially for ResearchCloud 
* `ansible-lint`

# Creating your own component

##

Build your own!

Suggested exercise: deploy a web application and add authentication.

Ideas:

1. [ASReview](https://asreview.nl/download/#)
1. [Ollama API](https://github.com/ollama/ollama?#rest-api)
1. [Theia IDE](https://theia-ide.org/#theiaidedownload)
1. Your own app!

See [here](https://github.com/UtrechtUniversity/re-presentation-src-components/blob/main/exercises.md) for more detailed exercise instructions.

##

Think about the steps that need to be performed, e.g:

1. Create a python venv
1. Install ASReview in it
1. Run it as a system service
1. Add a reverse proxy

What parameters do you need? 

# Wrap up

##

* How did it go?
* Future steps